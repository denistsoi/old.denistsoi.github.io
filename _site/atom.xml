<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Denis Tsoi</title>
 <link href="http://username.github.io/" rel="self"/>
 <link href="http://username.github.io"/>
 <updated>2014-02-27T17:42:43+08:00</updated>
 <id>http://username.github.io</id>
 <author>
   <name>Denis Tsoi</name>
   <email>blah@email.test</email>
 </author>

 
 <entry>
   <title>Try out Design Patterns in Golang</title>
   <link href="http://username.github.io/2014/02/24/try-out-design-patterns-in-golang"/>
   <updated>2014-02-24T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/24/try-out-design-patterns-in-golang</id>
   <content type="html">&lt;h4 id=&quot;shape&quot;&gt;Shape:&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://play.golang.org/p/iU8FLt3Tuf&quot;&gt;Using Functions&lt;/a&gt;&lt;br /&gt;&lt;a href=&quot;http://play.golang.org/p/Tp7tCOs30_&quot;&gt;Using Structs&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;go_concurrency&quot;&gt;Go Concurrency&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://play.golang.org/p/rGuGlrb9_E&quot;&gt;Using Timers and Goroutines&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 10</title>
   <link href="http://username.github.io/2014/02/20/getting-started-with-golang-part-10"/>
   <updated>2014-02-20T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/20/getting-started-with-golang-part-10</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#65&quot;&gt;GO ROUTINES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func say(s string) {
    for i := 0; i &amp;lt; 5; i++ {
        time.Sleep(100 * time.Millisecond)
        fmt.Println(s)
    }
}

func main() {
    go say(&amp;quot;world&amp;quot;)
    say(&amp;quot;hello&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A goroutine is a lightweight thread managed by the Go runtime.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go f(x, y, z)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;starts a new goroutine running&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;f(x, y, z)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The evaluation of f, x, y, and z happens in the current goroutine and the execution of f happens in the new goroutine.&lt;/p&gt;

&lt;p&gt;Goroutines run in the same address space, so access to shared memory must be synchronized. The sync package provides useful primitives, although you won’t need them much in Go as there are other primitives. (See the next slide.)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#66&quot;&gt;GO CHANNELS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func sum(a []int, c chan int) {
    sum := 0
    for _, v := range a {
        sum += v
    }
    c &amp;lt;- sum // send sum to c
}

func main() {
    a := []int{7, 2, 8, -9, 4, 0}

    c := make(chan int)
    go sum(a[:len(a)/2], c)
    go sum(a[len(a)/2:], c)
    x, y := &amp;lt;-c, &amp;lt;-c // receive from c

    fmt.Println(x, y, x+y)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Channels are a typed conduit through which you can send and receive values with the channel operator, &amp;lt;-.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ch &amp;lt;- v    // Send v to channel ch.
v := &amp;lt;-ch  // Receive from ch, and
           // assign value to v.&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(The data flows in the direction of the arrow.)&lt;/p&gt;

&lt;p&gt;Like maps and slices, channels must be created before use:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ch := make(chan int)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;By default, sends and receives block until the other side is ready. This allows goroutines to synchronize without explicit locks or condition variables.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#67&quot;&gt;GO BUFFERED&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    c := make(chan int, 2)
    c &amp;lt;- 13
    c &amp;lt;- 2
    fmt.Println(&amp;lt;-c)
    fmt.Println(&amp;lt;-c)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Channels can be buffered. Provide the buffer length as the second argument to make to initialize a buffered channel:&lt;/p&gt;

&lt;p&gt;ch := make(chan int, 100) Sends to a buffered channel block only when the buffer is full. Receives block when the buffer is empty.&lt;/p&gt;

&lt;p&gt;Modify the example to overfill the buffer and see what happens.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#68&quot;&gt;GO RANGE AND CLOSE&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

func fibonacci(n int, c chan int) {
    x, y := 0, 1
    for i := 0; i &amp;lt; n; i++ {
        c &amp;lt;- x
        x, y = y, x+y
    }
    close(c)
}

func main() {
    c := make(chan int, 10)
    go fibonacci(cap(c), c)
    for i := range c {
        fmt.Println(i)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A sender can close a channel to indicate that no more values will be sent. Receivers can test whether a channel has been closed by assigning a second parameter to the receive expression: after&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;v, ok := &amp;lt;-ch&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ok is false if there are no more values to receive and the channel is closed.&lt;/p&gt;

&lt;p&gt;The loop for i := range c receives values from the channel repeatedly until it is closed.&lt;/p&gt;

&lt;p&gt;Note: Only the sender should close a channel, never the receiver. Sending on a closed channel will cause a panic.&lt;/p&gt;

&lt;p&gt;Another note: Channels aren’t like files; you don’t usually need to close them. Closing is only necessary when the receiver must be told there are no more values coming, such as to terminate a range loop.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#69&quot;&gt;GO SELECT&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func fibonacci(c, quit chan int) {
    x, y := 0, 1
    for {
        select {
        case c &amp;lt;- x:
            x, y = y, x+y
        case &amp;lt;-quit:
            fmt.Println(&amp;quot;quit&amp;quot;)
            return
        }
    }
}

func main() {
    c := make(chan int)
    quit := make(chan int)
    go func() {
        for i := 0; i &amp;lt; 10; i++ {
            fmt.Println(&amp;lt;-c)
        }
        quit &amp;lt;- 0
    }()
    fibonacci(c, quit)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The select statement lets a goroutine wait on multiple communication operations.&lt;/p&gt;

&lt;p&gt;A select blocks until one of its cases can run, then it executes that case. It chooses one at random if multiple are ready.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#70&quot;&gt;GO DEFAULT SELECTION&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {
    tick := time.Tick(100 * time.Millisecond)
    boom := time.After(500 * time.Millisecond)
    for {
        select {
        case &amp;lt;-tick:
            fmt.Println(&amp;quot;tick.&amp;quot;)
        case &amp;lt;-boom:
            fmt.Println(&amp;quot;BOOM!&amp;quot;)
            return
        default:
            fmt.Println(&amp;quot;    .&amp;quot;)
            time.Sleep(50 * time.Millisecond)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The default case in a select is run if no other case is ready.&lt;/p&gt;

&lt;p&gt;Use a default case to try a send or receive without blocking:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;select {
case i := &amp;lt;-c:
    // use i
default:
    // receiving from c would block
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>golang videos</title>
   <link href="http://username.github.io/2014/02/19/golang-videos"/>
   <updated>2014-02-19T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/19/golang-videos</id>
   <content type="html">&lt;h3 id=&quot;&quot;&gt;{}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://vimeo.com/53221560&quot;&gt;Go: Code that Grows with Grace&lt;/a&gt; &lt;a href=&quot;http://vimeo.com/53221558&quot;&gt;Go: A Simple Programming Environment&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;_2&quot;&gt;{}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://research.swtch.com/gotour&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://www.youtube.com/watch?v=XCsL89YtqCs&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;_3&quot;&gt;{}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=f6kdp27TYZs&quot;&gt;Google i/o 2012 Go Concurrency Patterns&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=QDDwwePbDtw&quot;&gt;Google i/o 2013 Advanced Go Concurrency Patterns&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;_4&quot;&gt;{}&lt;/h4&gt;

&lt;p&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=cN_DpYBzKso&quot;&gt;Concurrency is Not Parallelism&lt;/a&gt; &lt;a href=&quot;http://talks.golang.org/2012/waza.slide#53&quot;&gt;Slides: Concurrency is Not Parallelism&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;_5&quot;&gt;{}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://blog.golang.org/&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://blog.golang.org/appengine-dec2013&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;_6&quot;&gt;{}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://golang.org/doc/code.html&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://golang.org/doc/effective_go.html&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;_7&quot;&gt;{}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://golang.org/doc/codewalk/functions/&quot;&gt;&lt;/a&gt; &lt;a href=&quot;http://golang.org/doc/codewalk/markov/&quot;&gt;Marchov Chain Algorithm&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;_8&quot;&gt;{}&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://golang.org/pkg/&quot;&gt;Go Packages&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>golang exercises</title>
   <link href="http://username.github.io/2014/02/19/golang-exercises"/>
   <updated>2014-02-19T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/19/golang-exercises</id>
   <content type="html">&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#50&quot;&gt;Complex Cube Roots&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot; 
    &amp;quot;math&amp;quot;
)

func Cbrt(x float64) float64 {
    Pow(x,y)
    return x
}

func main() {
    fmt.Println(Cbrt(2))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let’s explore Go’s built-in support for complex numbers via the complex64 and complex128 types. For cube roots, Newton’s method amounts to repeating:&lt;/p&gt;

&lt;p&gt;Find the cube root of 2, just to make sure the algorithm works. There is a Pow function in the math/cmplx package.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#58&quot;&gt;Errors&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

func Sqrt(f float64) (float64, error) {
    return 0, nil
}

func main() {
    fmt.Println(Sqrt(2))
    fmt.Println(Sqrt(-2))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Copy your Sqrt function from the earlier exercises and modify it to return an error value.&lt;/p&gt;

&lt;p&gt;Sqrt should return a non-nil error value when given a negative number, as it doesn’t support complex numbers.&lt;/p&gt;

&lt;p&gt;Create a new type&lt;/p&gt;

&lt;p&gt;type ErrNegativeSqrt float64 and make it an error by giving it a&lt;/p&gt;

&lt;p&gt;func (e ErrNegativeSqrt) Error() string method such that ErrNegativeSqrt(-2).Error() returns “cannot Sqrt negative number: -2”.&lt;/p&gt;

&lt;p&gt;Note: a call to fmt.Print(e) inside the Error method will send the program into an infinite loop. You can avoid this by converting e first: fmt.Print(float64(e)). Why?&lt;/p&gt;

&lt;p&gt;Change your Sqrt function to return an ErrNegativeSqrt value when given a negative number.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#60&quot;&gt;HTTP Handlers&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;net/http&amp;quot;
)

func main() {
    // your http.Handle calls here
    http.ListenAndServe(&amp;quot;localhost:4000&amp;quot;, nil)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Implement the following types and define ServeHTTP methods on them. Register them to handle specific paths in your web server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type String string

type Struct struct {
    Greeting string
    Punct    string
    Who      string
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, you should be able to register handlers using:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http.Handle(&amp;quot;/string&amp;quot;, String(&amp;quot;I&amp;#39;m a frayed knot.&amp;quot;))
http.Handle(&amp;quot;/struct&amp;quot;, &amp;amp;Struct{&amp;quot;Hello&amp;quot;, &amp;quot;:&amp;quot;, &amp;quot;Gophers!&amp;quot;})&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#62&quot;&gt;IMAGES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;code.google.com/p/go-tour/pic&amp;quot;
    &amp;quot;image&amp;quot;
)

type Image struct{}

func main() {
    m := Image{}
    pic.ShowImage(m)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Remember the picture generator you wrote earlier? Let’s write another one, but this time it will return an implementation of image.Image instead of a slice of data.&lt;/p&gt;

&lt;p&gt;Define your own Image type, implement the necessary methods, and call pic.ShowImage.&lt;/p&gt;

&lt;p&gt;Bounds should return a image.Rectangle, like image.Rect(0, 0, w, h).&lt;/p&gt;

&lt;p&gt;ColorModel should return color.RGBAModel.&lt;/p&gt;

&lt;p&gt;At should return a color; the value v in the last picture generator corresponds to color.RGBA{v, v, 255, 255} in this one.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#72&quot;&gt;EQUIVALENT BINARY TREES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;code.google.com/p/go-tour/tree&amp;quot;

// Walk walks the tree t sending all values
// from the tree to the channel ch.
func Walk(t *tree.Tree, ch chan int)

// Same determines whether the trees
// t1 and t2 contain the same values.
func Same(t1, t2 *tree.Tree) bool

func main() {
}&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Implement the Walk function.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Test the Walk function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The function tree.New(k) constructs a randomly-structured binary tree holding the values k, 2k, 3k, …, 10k.&lt;/p&gt;

&lt;p&gt;Create a new channel ch and kick off the walker:&lt;/p&gt;

&lt;p&gt;go Walk(tree.New(1), ch) Then read and print 10 values from the channel. It should be the numbers 1, 2, 3, …, 10.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Implement the Same function using Walk to determine whether t1 and t2 store the same values.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;Test the Same function.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Same(tree.New(1), tree.New(1)) should return true, and Same(tree.New(1), tree.New(2)) should return false.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#73&quot;&gt;WEB CRAWLER&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
)

type Fetcher interface {
    // Fetch returns the body of URL and
    // a slice of URLs found on that page.
    Fetch(url string) (body string, urls []string, err error)
}

// Crawl uses fetcher to recursively crawl
// pages starting with url, to a maximum of depth.
func Crawl(url string, depth int, fetcher Fetcher) {
    // TODO: Fetch URLs in parallel.
    // TODO: Don&amp;#39;t fetch the same URL twice.
    // This implementation doesn&amp;#39;t do either:
    if depth &amp;lt;= 0 {
        return
    }
    body, urls, err := fetcher.Fetch(url)
    if err != nil {
        fmt.Println(err)
        return
    }
    fmt.Printf(&amp;quot;found: %s %q\n&amp;quot;, url, body)
    for _, u := range urls {
        Crawl(u, depth-1, fetcher)
    }
    return
}

func main() {
    Crawl(&amp;quot;http://golang.org/&amp;quot;, 4, fetcher)
}

// fakeFetcher is Fetcher that returns canned results.
type fakeFetcher map[string]*fakeResult

type fakeResult struct {
    body string
    urls []string
}

func (f fakeFetcher) Fetch(url string) (string, []string, error) {
    if res, ok := f[url]; ok {
        return res.body, res.urls, nil
    }
    return &amp;quot;&amp;quot;, nil, fmt.Errorf(&amp;quot;not found: %s&amp;quot;, url)
}

// fetcher is a populated fakeFetcher.
var fetcher = fakeFetcher{
    &amp;quot;http://golang.org/&amp;quot;: &amp;amp;fakeResult{
        &amp;quot;The Go Programming Language&amp;quot;,
        []string{
            &amp;quot;http://golang.org/pkg/&amp;quot;,
            &amp;quot;http://golang.org/cmd/&amp;quot;,
        },
    },
    &amp;quot;http://golang.org/pkg/&amp;quot;: &amp;amp;fakeResult{
        &amp;quot;Packages&amp;quot;,
        []string{
            &amp;quot;http://golang.org/&amp;quot;,
            &amp;quot;http://golang.org/cmd/&amp;quot;,
            &amp;quot;http://golang.org/pkg/fmt/&amp;quot;,
            &amp;quot;http://golang.org/pkg/os/&amp;quot;,
        },
    },
    &amp;quot;http://golang.org/pkg/fmt/&amp;quot;: &amp;amp;fakeResult{
        &amp;quot;Package fmt&amp;quot;,
        []string{
            &amp;quot;http://golang.org/&amp;quot;,
            &amp;quot;http://golang.org/pkg/&amp;quot;,
        },
    },
    &amp;quot;http://golang.org/pkg/os/&amp;quot;: &amp;amp;fakeResult{
        &amp;quot;Package os&amp;quot;,
        []string{
            &amp;quot;http://golang.org/&amp;quot;,
            &amp;quot;http://golang.org/pkg/&amp;quot;,
        },
    },
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this exercise you’ll use Go’s concurrency features to parallelize a web crawler.&lt;/p&gt;

&lt;p&gt;Modify the Crawl function to fetch URLs in parallel without fetching the same URL twice.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 9</title>
   <link href="http://username.github.io/2014/02/19/getting-started-with-golang-part-9"/>
   <updated>2014-02-19T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/19/getting-started-with-golang-part-9</id>
   <content type="html">&lt;h3 id=&quot;lesson_57&quot;&gt;LESSON 57&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#57&quot;&gt;GO ERRORS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

type MyError struct {
    When time.Time
    What string
}

func (e *MyError) Error() string {
    return fmt.Sprintf(&amp;quot;at %v, %s&amp;quot;,
        e.When, e.What)
}

func run() error {
    return &amp;amp;MyError{
        time.Now(),
        &amp;quot;it didn&amp;#39;t work&amp;quot;,
    }
}

func main() {
    if err := run(); err != nil {
        fmt.Println(err)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An error is anything that can describe itself as an error string. The idea is captured by the predefined, built-in interface type, error, with its single method, Error, returning a string:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type error interface {
    Error() string
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The fmt package’s various print routines automatically know to call the method when asked to print an error.&lt;/p&gt;

&lt;h3 id=&quot;lesson_59&quot;&gt;LESSON 59&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#59&quot;&gt;GO WEB SERVER&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;
)

type Hello struct{}

func (h Hello) ServeHTTP(
    w http.ResponseWriter,
    r *http.Request) {
    fmt.Fprint(w, &amp;quot;Hello!&amp;quot;)
}

func main() {
    var h Hello
    http.ListenAndServe(&amp;quot;localhost:4000&amp;quot;, h)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package http serves HTTP requests using any value that implements http.Handler:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package http

type Handler interface {
    ServeHTTP(w ResponseWriter, r *Request)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this example, the type Hello implements http.Handler.&lt;/p&gt;

&lt;p&gt;Visit http://localhost:4000/ to see the greeting.&lt;/p&gt;

&lt;p&gt;Note: This example won’t run through the web-based tour user interface. To try writing web servers you may want to Install Go.&lt;/p&gt;

&lt;h3 id=&quot;lesson_61&quot;&gt;LESSON 61&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#61&quot;&gt;GO IMAGES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;image&amp;quot;
)

func main() {
    m := image.NewRGBA(image.Rect(0, 0, 100, 100))
    fmt.Println(m.Bounds())
    fmt.Println(m.At(0, 0).RGBA())
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Package image defines the Image interface:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package image

type Image interface {
    ColorModel() color.Model
    Bounds() Rectangle
    At(x, y int) color.Color
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;(See the documentation for all the details.)&lt;/p&gt;

&lt;p&gt;Also, color.Color and color.Model are interfaces, but we’ll ignore that by using the predefined implementations color.RGBA and color.RGBAModel. These interfaces and types are specified by the image/color package&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 8</title>
   <link href="http://username.github.io/2014/02/19/getting-started-with-golang-part-8"/>
   <updated>2014-02-19T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/19/getting-started-with-golang-part-8</id>
   <content type="html">&lt;h3 id=&quot;methods_and_interfaces&quot;&gt;Methods and Interfaces&lt;/h3&gt;

&lt;h3 id=&quot;lesson_52&quot;&gt;LESSON 52&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#52&quot;&gt;GO Methods and Interfaces&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

type Vertex struct {
    X, Y float64
}

func (v *Vertex) Abs() float64 {
    return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
    v := &amp;amp;Vertex{3, 4}
    fmt.Println(v.Abs())
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go does not have classes. However, you can define methods on struct types. The method receiver appears in its own argument list between the func keyword and the method name.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

type MyFloat float64

func (f MyFloat) Abs() float64 {
    if f &amp;lt; 0 {
        return float64(-f)
    }
    return float64(f)
}

func main() {
    f := MyFloat(-math.Sqrt2)
    fmt.Println(f.Abs())
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In fact, you can define a method on any type you define in your package, not just structs. You cannot define a method on a type from another package, or on a basic type.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

type Vertex struct {
    X, Y float64
}

func (v *Vertex) Scale(f float64) {
    v.X = v.X * f
    v.Y = v.Y * f
}

func (v *Vertex) Abs() float64 {
    return math.Sqrt(v.X*v.X + v.Y*v.Y)
}

func main() {
    v := &amp;amp;Vertex{3, 4}
    v.Scale(5)
    fmt.Println(v, v.Abs())
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Methods can be associated with a named type or a pointer to a named type.&lt;/p&gt;

&lt;p&gt;We just saw two Abs methods. One on the &lt;code&gt;*Vertex&lt;/code&gt; pointer type and the other on the MyFloat value type.&lt;/p&gt;

&lt;p&gt;There are two reasons to use a pointer receiver. First, to avoid copying the value on each method call (more efficient if the value type is a large struct). Second, so that the method can modify the value that its receiver points to.&lt;/p&gt;

&lt;p&gt;Try changing the declarations of the Abs and Scale methods to use Vertex as the receiver, instead of &lt;code&gt;*Vertex.&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The Scale method has no effect when v is a Vertex. Scale mutates v. When v is a value (non-pointer) type, the method sees a copy of the Vertex and cannot mutate the original value.&lt;/p&gt;

&lt;p&gt;Abs works either way. It only reads v. It doesn’t matter whether it is reading the original value (through a pointer) or a copy of that value.&lt;/p&gt;

&lt;h3 id=&quot;lesson_55&quot;&gt;LESSON 55&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#55&quot;&gt;GO Interfaces&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

type Abser interface {
    Abs() float64
}

func main() {
    var a Abser
    f := MyFloat(-math.Sqrt2)
    v := Vertex{3, 4}

    a = f  // a MyFloat implements Abser
    a = &amp;amp;v // a *Vertex implements Abser

    // In the following line, v is a Vertex (not *Vertex)
    // and does NOT implement Abser.
    a = v

    fmt.Println(a.Abs())
}

type MyFloat float64

func (f MyFloat) Abs() float64 {
    if f &amp;lt; 0 {
        return float64(-f)
    }
    return float64(f)
}

type Vertex struct {
    X, Y float64
}
func (v *Vertex) Abs() float64 {
    return math.Sqrt(v.X*v.X + v.Y*v.Y)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An interface type is defined by a set of methods.&lt;br /&gt;A value of interface type can hold any value that implements those methods.&lt;br /&gt;Note: The code on the left fails to compile.&lt;br /&gt;Vertex doesn’t satisfy Abser because the Abs method is defined only on &lt;code&gt;*Vertex, not Vertex.&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;os&amp;quot;
)

type Reader interface {
    Read(b []byte) (n int, err error)
}

type Writer interface {
    Write(b []byte) (n int, err error)
}

type ReadWriter interface {
    Reader
    Writer
}

func main() {
    var w Writer

    // os.Stdout implements Writer
    w = os.Stdout

    fmt.Fprintf(w, &amp;quot;hello, writer\n&amp;quot;)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A type implements an interface by implementing the methods.&lt;/p&gt;

&lt;p&gt;There is no explicit declaration of intent.&lt;/p&gt;

&lt;p&gt;Implicit interfaces decouple implementation packages from the packages that define the interfaces: neither depends on the other.&lt;/p&gt;

&lt;p&gt;It also encourages the definition of precise interfaces, because you don’t have to find every implementation and tag it with the new interface name.&lt;/p&gt;

&lt;p&gt;Package io defines Reader and Writer; you don’t have to.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 7</title>
   <link href="http://username.github.io/2014/02/19/getting-started-with-golang-part-7"/>
   <updated>2014-02-19T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/19/getting-started-with-golang-part-7</id>
   <content type="html">&lt;h3 id=&quot;lesson_47&quot;&gt;Lesson 47&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#47&quot;&gt;GO SWITCH&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;runtime&amp;quot;
)

func main() {
    fmt.Print(&amp;quot;Go runs on &amp;quot;)
    switch os := runtime.GOOS; os {
    case &amp;quot;darwin&amp;quot;:
        fmt.Println(&amp;quot;OS X.&amp;quot;)
    case &amp;quot;linux&amp;quot;:
        fmt.Println(&amp;quot;Linux.&amp;quot;)
    default:
        // freebsd, openbsd,
        // plan9, windows...
        fmt.Printf(&amp;quot;%s.&amp;quot;, os)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;NO breaks in switches (they are automatic), however, if you require two cases to be the same, you could use the &lt;strong&gt;fallthrough&lt;/strong&gt; statement.&lt;/p&gt;

&lt;p&gt;Moving on&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {
    fmt.Println(&amp;quot;When&amp;#39;s Saturday?&amp;quot;)
    today := time.Now().Weekday()
    switch time.Saturday {
    case today + 0:
        fmt.Println(&amp;quot;Today.&amp;quot;)
    case today + 1:
        fmt.Println(&amp;quot;Tomorrow.&amp;quot;)
    case today + 2:
        fmt.Println(&amp;quot;In two days.&amp;quot;)
    default:
        fmt.Println(&amp;quot;Too far away.&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch cases evaluate cases from top to bottom, stopping when a case succeeds.&lt;/p&gt;

&lt;p&gt;(For example,&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;switch i {
case 0:
case f():
}
does not call f if i==0.)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: Time in the Go playground always appears to start at 2009-11-10 23:00:00 UTC, a value whose significance is left as an exercise for the reader.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;time&amp;quot;
)

func main() {
    t := time.Now()
    switch {
    case t.Hour() &amp;lt; 12:
        fmt.Println(&amp;quot;Good morning!&amp;quot;)
    case t.Hour() &amp;lt; 17:
        fmt.Println(&amp;quot;Good afternoon.&amp;quot;)
    default:
        fmt.Println(&amp;quot;Good evening.&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Switch without a condition is the same as switch true. This construct can be a clean way to write long if-then-else chains.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Moving On</title>
   <link href="http://username.github.io/2014/02/18/moving-on"/>
   <updated>2014-02-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/18/moving-on</id>
   <content type="html"></content>
 </entry>
 
 <entry>
   <title>getting started with golang part 6</title>
   <link href="http://username.github.io/2014/02/18/getting-started-with-golang-part-6"/>
   <updated>2014-02-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/18/getting-started-with-golang-part-6</id>
   <content type="html">&lt;h3 id=&quot;lesson_39&quot;&gt;Lesson 39&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#39&quot;&gt;GO MAPS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    Lat, Long float64
}

var m map[string]Vertex

func main() {
    m = make(map[string]Vertex)
    m[&amp;quot;Bell Labs&amp;quot;] = Vertex{
        40.68433, -74.39967,
    }
    fmt.Println(m[&amp;quot;Bell Labs&amp;quot;])
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A map maps keys to values.&lt;/p&gt;

&lt;p&gt;Maps must be created with make (not new) before use; the nil map is empty and cannot be assigned to.&lt;/p&gt;

&lt;h3 id=&quot;lesson_40&quot;&gt;Lesson 40&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#40&quot;&gt;GO MAP LITERALS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    Lat, Long float64
}

var m = map[string]Vertex{
    &amp;quot;Bell Labs&amp;quot;: Vertex{
        40.68433, -74.39967,
    },
    &amp;quot;Google&amp;quot;: Vertex{
        37.42202, -122.08408,
    },
}

func main() {
    fmt.Println(m)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Map literals are like struct literals, but the keys are required.&lt;/p&gt;

&lt;h3 id=&quot;lesson_41&quot;&gt;Lesson 41&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#41&quot;&gt;GO MAP MUTATIONS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    Lat, Long float64
}

var m = map[string]Vertex{
    &amp;quot;Bell Labs&amp;quot;: {40.68433, -74.39967},
    &amp;quot;Google&amp;quot;:    {37.42202, -122.08408},
}

func main() {
    fmt.Println(m)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If the top-level type is just a type name, you can omit it from the elements of the literal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    m := make(map[string]int)

    m[&amp;quot;Answer&amp;quot;] = 42
    fmt.Println(&amp;quot;The value:&amp;quot;, m[&amp;quot;Answer&amp;quot;])

    m[&amp;quot;Answer&amp;quot;] = 48
    fmt.Println(&amp;quot;The value:&amp;quot;, m[&amp;quot;Answer&amp;quot;])

    delete(m, &amp;quot;Answer&amp;quot;)
    fmt.Println(&amp;quot;The value:&amp;quot;, m[&amp;quot;Answer&amp;quot;])

    v, ok := m[&amp;quot;Answer&amp;quot;]
    fmt.Println(&amp;quot;The value:&amp;quot;, v, &amp;quot;Present?&amp;quot;, ok)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Insert or update an element in map m:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;m[key] = elem  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Retrieve an element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elem = m[key]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Delete an element:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;delete(m, key)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Test that a key is present with a two-value assignment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;elem, ok = m[key]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If key is in m, ok is true. If not, ok is false and elem is the zero value for the map’s element type.&lt;/p&gt;

&lt;p&gt;Similarly, when reading from a map if the key is not present the result is the zero value for the map’s element type.&lt;/p&gt;

&lt;h3 id=&quot;lesson_44&quot;&gt;Lesson 44&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#44&quot;&gt;GO FUNCTION VALUES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

func main() {
    hypot := func(x, y float64) float64 {
        return math.Sqrt(x*x + y*y)
    }

    fmt.Println(hypot(3, 4))
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;lesson_45&quot;&gt;Lesson 45&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#45&quot;&gt;GO FUNCTION CLOSURES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func adder() func(int) int {
    sum := 0
    return func(x int) int {
        sum += x
        return sum
    }
}

func main() {
    pos, neg := adder(), adder()
    for i := 0; i &amp;lt; 10; i++ {
        fmt.Println(
            pos(i),
            neg(-2*i),
        )
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go functions may be closures. A closure is a function value that references variables from outside its body. The function may access and assign to the referenced variables; in this sense the function is “bound” to the variables.&lt;/p&gt;

&lt;p&gt;For example, the adder function returns a closure. Each closure is bound to its own sum variable.&lt;/p&gt;

&lt;h3 id=&quot;lesson_46&quot;&gt;Lesson 46&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#46&quot;&gt;GO FIBONACCI&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

// fibonacci is a function that returns
// a function that returns an int.

func fibonacci() func() int {
    
}

func main() {
    f := fibonacci()
    for i := 0; i &amp;lt; 10; i++ {
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&quot;answer&quot;&gt;Answer&lt;/h4&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

// fibonacci is a function that returns
// a function that returns an int.

func fibonacci() func() int {
    x := 0
    y := 1
    
    return func() int {
        x,y = y,x+y
        return x
    }
}

func main() {
    f := fibonacci()
    for i := 0; i &amp;lt; 10; i++ {
        fmt.Println(i, f())
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why? -&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 5</title>
   <link href="http://username.github.io/2014/02/18/getting-started-with-golang-part-5"/>
   <updated>2014-02-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/18/getting-started-with-golang-part-5</id>
   <content type="html">&lt;h3 id=&quot;lesson_31&quot;&gt;Lesson 31&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#31&quot;&gt;GO ARRAYS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    var a [2]string
    a[0] = &amp;quot;Hello&amp;quot;
    a[1] = &amp;quot;World&amp;quot;
    fmt.Println(a[0], a[1])
    fmt.Println(a)
}

RETURNS: 
Hello World
[Hello World]&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The type [n]T is an array of n values of type T. The expression:&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;var a [10]int&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;declares a variable a as an array of ten integers.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
&lt;p&gt;An array’s length is part of its type, so arrays cannot be resized. This seems limiting, but don’t worry; Go provides a convenient way of working with arrays.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;moving_on&quot;&gt;Moving On&lt;/h5&gt;

&lt;h3 id=&quot;lesson_32&quot;&gt;Lesson 32&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#32&quot;&gt;GO SLICES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    p := []int{2, 3, 5, 7, 11, 13}
    fmt.Println(&amp;quot;p ==&amp;quot;, p)

    for i := 0; i &amp;lt; len(p); i++ {
        fmt.Printf(&amp;quot;p[%d] == %d\n&amp;quot;, i, p[i])
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A slice points to an array of values and also includes a length. []T is a slice with elements of type T.&lt;/p&gt;

&lt;p&gt;THOUGHT: Can we put a function for fetching values to instantiate values for array~&lt;/p&gt;

&lt;h5 id=&quot;moving_on_2&quot;&gt;Moving On&lt;/h5&gt;

&lt;h3 id=&quot;lesson_33&quot;&gt;Lesson 33&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#33&quot;&gt;GO SLICIING SLICES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    p := []int{2, 3, 5, 7, 11, 13}
    fmt.Println(&amp;quot;p ==&amp;quot;, p)
    fmt.Println(&amp;quot;p[1:4] ==&amp;quot;, p[1:4])

    // missing low index implies 0
    fmt.Println(&amp;quot;p[:3] ==&amp;quot;, p[:3])

    // missing high index implies len(s)
    fmt.Println(&amp;quot;p[4:] ==&amp;quot;, p[4:])
}
RETURNS: 
p == [2 3 5 7 11 13]
p[1:4] == [3 5 7]
p[:3] == [2 3 5]
p[4:] == [11 13]&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Slices can be re-sliced, creating a new slice value that points to the same array.&lt;/p&gt;

&lt;p&gt;The expression&lt;/p&gt;

&lt;p&gt;s[lo:hi] evaluates to a slice of the elements from lo through hi-1, inclusive. Thus&lt;/p&gt;

&lt;p&gt;s[lo:lo] is empty and&lt;/p&gt;

&lt;p&gt;s[lo:lo+1] has one element.&lt;/p&gt;

&lt;p&gt;THOUGHT: SIMILAR TO PYTHON and Slice in Jquery?&lt;/p&gt;

&lt;p&gt;NOTE: basically, if p[1:4], the returned values are index, 1 -&amp;gt; 3 (totalling 3 values) if p[0:3], the returned values are index, 0 -&amp;gt; 2 (totalling 3 values) if p[4:], the returned values are index, 4 -&amp;gt; end (totalling 2 values)&lt;/p&gt;

&lt;h5 id=&quot;moving_on_3&quot;&gt;Moving On&lt;/h5&gt;

&lt;h3 id=&quot;lesson_34&quot;&gt;Lesson 34&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#34&quot;&gt;GO MAKING MORE SLICES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    a := make([]int, 5)
    printSlice(&amp;quot;a&amp;quot;, a)
    b := make([]int, 0, 5)
    printSlice(&amp;quot;b&amp;quot;, b)
    c := b[:2]
    printSlice(&amp;quot;c&amp;quot;, c)
    d := c[2:5]
    printSlice(&amp;quot;d&amp;quot;, d)
}

func printSlice(s string, x []int) {
    fmt.Printf(&amp;quot;%s len=%d cap=%d %v\n&amp;quot;,
        s, len(x), cap(x), x)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Slices are created with the make function. It works by allocating a zeroed array and returning a slice that refers to that array:&lt;/p&gt;

&lt;p&gt;a := make([]int, 5) // len(a)=5 To specify a capacity, pass a third argument to make:&lt;/p&gt;

&lt;p&gt;b := make([]int, 0, 5) // len(b)=0, cap(b)=5&lt;/p&gt;

&lt;p&gt;b = b[:cap(b)] // len(b)=5, cap(b)=5 b = b[1:] // len(b)=4, cap(b)=4&lt;/p&gt;

&lt;p&gt;NOTE: Slices made via the make function can allow limit and capacity for the slices made~&lt;/p&gt;

&lt;h5 id=&quot;moving_on_4&quot;&gt;Moving On&lt;/h5&gt;

&lt;h3 id=&quot;lesson_35&quot;&gt;Lesson 35&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#35&quot;&gt;GO NIL SLICES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    var z []int
    fmt.Println(z, len(z), cap(z))
    if z == nil {
        fmt.Println(&amp;quot;nil!&amp;quot;)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The zero value of a slice is nil. A nil slice has a length and capacity of 0.&lt;br /&gt;(To learn more about slices, read the &lt;a href=&quot;http://blog.golang.org/go-slices-usage-and-internals&quot;&gt;Slices: usage and internals article.&lt;/a&gt;)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&quot;moving_on_5&quot;&gt;Moving On&lt;/h5&gt;

&lt;h3 id=&quot;lesson_36&quot;&gt;Lesson 36&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#35&quot;&gt;GO RANGE&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

var pow = []int{1, 2, 4, 8, 16, 32, 64, 128}

func main() {
    for i, v := range pow {
        fmt.Printf(&amp;quot;2**%d = %d\n&amp;quot;, i, v)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;The range form of the for loop iterates over a slice or map.&lt;/p&gt;

&lt;p&gt;NOTE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;for range?&lt;/li&gt;

&lt;li&gt;i = index&lt;/li&gt;

&lt;li&gt;v = value&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;Range Cont.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    pow := make([]int, 10)
    for i := range pow {
        pow[i] = 1 &amp;lt;&amp;lt; uint(i)
    }
    for _, value := range pow {
        fmt.Printf(&amp;quot;%d\n&amp;quot;, value)
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;You can skip the index or value by assigning to “_.” If you only want the index, drop the “value” entirely.&lt;/p&gt;

&lt;p&gt;NOTE:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;what is ”«”?&lt;/li&gt;

&lt;li&gt;what is uint( )?&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#38&quot;&gt;EXERCISE&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;code.google.com/p/go-tour/pic&amp;quot;

func Pic(dx, dy int) [][]uint8 {
}
func main() {
    pic.Show(Pic)
}&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Implement Pic. It should return a slice of length dy, each element of which is a slice of dx 8-bit unsigned integers. When you run the program, it will display your picture, interpreting the integers as grayscale (well, bluescale) values. The choice of image is up to you. Interesting functions include &lt;code&gt;x^y&lt;/code&gt;, &lt;code&gt;(x+y)/2&lt;/code&gt;, and &lt;code&gt;x*y&lt;/code&gt;. (You need to use a loop to allocate each &lt;code&gt;[]uint8&lt;/code&gt; inside the &lt;code&gt;[][]uint8&lt;/code&gt;). (Use uint8(intValue) to convert between types).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#38&quot;&gt;EXERCISE&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func Pic(dx, dy int) [][]uint8 {
    a := make([][]uint8, dy)
    for i := 0; i &amp;lt; dy; i++ {
      a[i] = make([]uint8, dx)
    }
    for y, row := range a {
        for x := range row {
            row[x] = uint8(x^y)-uint8(x^2+y)+uint8(x^y^2)
        }
    }
    return a
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;END OF PART 5&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 4</title>
   <link href="http://username.github.io/2014/02/18/getting-started-with-golang-part-4"/>
   <updated>2014-02-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/18/getting-started-with-golang-part-4</id>
   <content type="html">&lt;h3 id=&quot;lesson_26&quot;&gt;Lesson 26&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#26&quot;&gt;GO STRUCT&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    X int
    Y int
}

func main() {
    fmt.Println(Vertex{1, 2})
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A struct is a collection of fields.&lt;/p&gt;

&lt;p&gt;(And a type declaration does what you’d expect.)&lt;/p&gt;

&lt;p&gt;STRUCT FIELDS can be accessed with dot notation&lt;/p&gt;

&lt;p&gt;i.e. if v := Vertex{1,2} where v.X = 4, this will result in X = 4 and Y = 2&lt;/p&gt;

&lt;h3 id=&quot;lesson_28&quot;&gt;Lesson 28&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#28&quot;&gt;GO POINTERS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    X int
    Y int
}

func main() {
    p := Vertex{1, 2}
    q := &amp;amp;p
    q.X = 1e9
    fmt.Println(p)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go has pointers, but no pointer arithmetic.&lt;/p&gt;

&lt;p&gt;Struct fields can be accessed through a struct pointer. The indirection through the pointer is transparent.&lt;/p&gt;

&lt;p&gt;NOTE: so the pointer q, which points to struct p assigns value X from pointer q with q.X to equal 1e9;&lt;/p&gt;

&lt;p&gt;HOMEWORK: WHAT ARE POINTER ARITHMETIC?!&lt;/p&gt;

&lt;h3 id=&quot;lesson_29&quot;&gt;Lesson 29&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#29&quot;&gt;GO STRUCT LITERALS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    X, Y int
}

var (
    p = Vertex{1, 2}  // has type Vertex
    q = &amp;amp;Vertex{1, 2} // has type *Vertex
    r = Vertex{X: 1}  // Y:0 is implicit
    s = Vertex{}      // X:0 and Y:0
)

func main() {
    fmt.Println(p, q, r, s)
}


RETURNS: {1 2} &amp;amp;{1 2} {1 0} {0 0}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A struct literal denotes a newly allocated struct value by listing the values of its fields. You can list just a subset of fields by using the Name: syntax. (And the order of named fields is irrelevant.) The special prefix &amp;amp; constructs a pointer to a newly allocated struct.&lt;/p&gt;

&lt;p&gt;NOTE: What happens when we declare p,q,r &amp;amp; s inside func main? - Return value is the same~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    X, Y int
}

var (
    p = Vertex{1, 2}  // has type Vertex
    q = &amp;amp;Vertex{1, 2} // has type *Vertex
    r = Vertex{X: 1}  // Y:0 is implicit
    s = Vertex{}      // X:0 and Y:0
)

func main() {
    p := Vertex{1, 3}  // has type Vertex
    q := &amp;amp;p
    
    r := p
    r.Y = 6        // Y:0 is implicit
    
    s := Vertex{}      // X:0 and Y:0
    fmt.Println(p, q, r, s)
}

RETURNS: {1 3} &amp;amp;{1 3} {1 6} {0 0}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;EXPLAINATION: p = type Vertex with X=1, Y=3 q = pointer pointing to p r = p r.Y = 6&lt;/p&gt;

&lt;p&gt;Since r is not a pointer, our value of r.Y is changed to 6 unaffecting other pointers and p. however, if r := &amp;amp;p and r.Y = 6, then all associated values for p.Y is assigned 6.&lt;/p&gt;

&lt;p&gt;Moving on&lt;/p&gt;

&lt;h3 id=&quot;lesson_30&quot;&gt;Lesson 30&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#30&quot;&gt;GO NEW FUNCTION&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

type Vertex struct {
    X, Y int
}

func main() {
    v := new(Vertex)
    fmt.Println(v)
    v.X, v.Y = 11, 9
    fmt.Println(v)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This prints &amp;amp;{0 0} &amp;amp;{11 9}&lt;/p&gt;

&lt;p&gt;Why? - as v is new Vertex with implicit values set to 0… but why the ampersand notation?&lt;/p&gt;

&lt;p&gt;REASON: The expression new(T) allocates a zeroed T value and returns a pointer to it.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var t *T = new(T)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or t := new(T)&lt;/p&gt;

&lt;p&gt;Moving On&lt;/p&gt;

&lt;p&gt;END OF PART 4: STRUCT&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 3</title>
   <link href="http://username.github.io/2014/02/18/getting-started-with-golang-part-3"/>
   <updated>2014-02-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/18/getting-started-with-golang-part-3</id>
   <content type="html">&lt;h3 id=&quot;lesson_22&quot;&gt;Lesson 22&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#22&quot;&gt;GO IF&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Remember that the ( ) is not required~&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

func sqrt(x float64) string {
    if x &amp;lt; 0 {
        return sqrt(-x) + &amp;quot;i&amp;quot;
    }
    return fmt.Sprint(math.Sqrt(x))
}

func main() {
    fmt.Println(sqrt(2), sqrt(-4))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Shorthand IF&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

func pow(x, n, lim float64) float64 {
    if v := math.Pow(x, n); v &amp;lt; lim {
        return v
    }
    return lim
}

func main() {
    fmt.Println(
        pow(3, 2, 10),
        pow(3, 3, 20),
    )
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Like for, the if statement can start with a short statement to execute before the condition.&lt;/p&gt;

&lt;p&gt;Variables declared by the statement are only in scope until the end of the if.&lt;/p&gt;

&lt;p&gt;(Try using v in the last return statement.) NOTE: v will be returned as undefined~&lt;/p&gt;

&lt;p&gt;Moving On&lt;/p&gt;

&lt;h3 id=&quot;lesson_24&quot;&gt;Lesson 24&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#24&quot;&gt;GO IF ELSE&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

func pow(x, n, lim float64) float64 {
    if v := math.Pow(x, n); v &amp;lt; lim {
        return v
    } else {
        fmt.Printf(&amp;quot;%g &amp;gt;= %g\n&amp;quot;, v, lim)
    }
    // can&amp;#39;t use v here, though
    return lim
}

func main() {
    fmt.Println(
        pow(3, 2, 10),
        pow(3, 3, 20),
    )
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Variables declared inside an if short statement are also available inside any of the else blocks.&lt;/p&gt;

&lt;p&gt;this function is determining if the value v is greater than the limit, and if it is less than the limit, the return value will be v and the limit. if the value is greater than the limit then the return print out will be “v &amp;gt;= lim”&lt;/p&gt;

&lt;p&gt;Moving on&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang part 2</title>
   <link href="http://username.github.io/2014/02/18/getting-started-with-golang-part-2"/>
   <updated>2014-02-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/18/getting-started-with-golang-part-2</id>
   <content type="html">&lt;p&gt;Part 2&lt;/p&gt;

&lt;h3 id=&quot;lesson_11&quot;&gt;Lesson 11&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#11&quot;&gt;GO VARABLES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

var i int
var c, python, java bool

func main() {
    fmt.Println(i, c, python, java)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;var&lt;/code&gt; statement declares a list of variables; as in function argument lists, the type is last.&lt;/p&gt;

&lt;p&gt;ORDER: ‘var’ &amp;gt; name &amp;gt; ‘type’&lt;/p&gt;

&lt;p&gt;The above would print 0 false false false&lt;/p&gt;

&lt;p&gt;Moving on&lt;/p&gt;

&lt;h3 id=&quot;lesson_12&quot;&gt;Lesson 12&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#12&quot;&gt;GO VARABLES WIT INIT&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

var i, j int = 1, 2
var c, python, java = true, false, &amp;quot;no!&amp;quot;

func main() {
    fmt.Println(i, j, c, python, java)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A var declaration can include initializers, one per variable.&lt;/p&gt;

&lt;p&gt;If an initializer is present, the type can be omitted; the variable will take the type of the initializer.&lt;/p&gt;

&lt;p&gt;The above would print 1 2 true false no!&lt;/p&gt;

&lt;p&gt;Moving on&lt;/p&gt;

&lt;h3 id=&quot;lesson_13&quot;&gt;Lesson 13&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#13&quot;&gt;GO SHORT VARABLE DECLARATIONS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    var i, j int = 1, 2
    k := 3
    c, python, java := true, false, &amp;quot;no!&amp;quot;

    fmt.Println(i, j, k, c, python, java)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Inside a function, the := short assignment statement can be used in place of a var declaration with implicit type.&lt;/p&gt;

&lt;p&gt;Outside a function, every construct begins with a keyword (var, func, and so on) and the := construct is not available.&lt;/p&gt;

&lt;p&gt;”:=” means that we can throw a var declaration INSIDE a func&lt;/p&gt;

&lt;p&gt;REF &lt;a href=&quot;http://en.wikipedia.org/wiki/Type_conversion&quot;&gt;Implicit Type&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Moving on&lt;/p&gt;

&lt;h3 id=&quot;lesson_14&quot;&gt;Lesson 14&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#14&quot;&gt;GO BASIC TYPES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math/cmplx&amp;quot;
)

var (
    ToBe   bool       = false
    MaxInt uint64     = 1&amp;lt;&amp;lt;64 - 1
    z      complex128 = cmplx.Sqrt(-5 + 12i)
)

func main() {
    const f = &amp;quot;%T(%v)\n&amp;quot;
    fmt.Printf(f, ToBe, ToBe)
    fmt.Printf(f, MaxInt, MaxInt)
    fmt.Printf(f, z, z)
}



bool

string

int  int8  int16  int32  int64
uint uint8 uint16 uint32 uint64 uintptr

byte // alias for uint8

rune // alias for int32
     // represents a Unicode code point

float32 float64

complex64 complex128&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Moving on&lt;/p&gt;

&lt;h3 id=&quot;lesson_15&quot;&gt;Lesson 15&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#15&quot;&gt;GO TYPE CONVERSION&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

func main() {
    var x, y int = 3, 4
    var f float64 = math.Sqrt(float64(3*3 + 4*4))
    var z int = int(f)
    fmt.Println(x, y, z)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The expression T(v) converts the value v to the type T.&lt;/p&gt;

&lt;p&gt;Some numeric conversions:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var i int = 42
var f float64 = float64(i)
var u uint = uint(f)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Or, put more simply:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;i := 42
f := float64(i)
u := uint(f)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Unlike in C, in Go assignment between items of different type requires an explicit conversion. Try removing the float64 or int conversions in the example and see what happens.&lt;/p&gt;

&lt;p&gt;Moving on.&lt;/p&gt;

&lt;h3 id=&quot;lesson_16&quot;&gt;Lesson 16&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#16&quot;&gt;GO CONSTANTS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

const Pi = 3.14

func main() {
    const World = &amp;quot;世界&amp;quot;
    fmt.Println(&amp;quot;Hello&amp;quot;, World)
    fmt.Println(&amp;quot;Happy&amp;quot;, Pi, &amp;quot;Day&amp;quot;)

    const Truth = true
    fmt.Println(&amp;quot;Go rules?&amp;quot;, Truth)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Constants are declared like variables, but with the const keyword. Constants can be character, string, boolean, or numeric values. Constants cannot be declared using the := syntax.&lt;/p&gt;

&lt;p&gt;Constants are by convention Capital cased -&lt;/p&gt;

&lt;p&gt;Moving on&lt;/p&gt;

&lt;h3 id=&quot;lesson_17&quot;&gt;Lesson 17&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#17&quot;&gt;GO NUMERIC CONSTANTS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

const (
    Big   = 1 &amp;lt;&amp;lt; 100
    Small = Big &amp;gt;&amp;gt; 99
)

func needInt(x int) int { return x*10 + 1 }
func needFloat(x float64) float64 {
    return x * 0.1
}

func main() {
    fmt.Println(needInt(Small))
    fmt.Println(needFloat(Small))
    fmt.Println(needFloat(Big))
    //fmt.Println(needInt(Big))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Numeric constants are high-precision values. An untyped constant takes the type needed by its context. Try printing needInt(Big) too.&lt;/p&gt;

&lt;p&gt;NOTE: What are high-precision values?&lt;/p&gt;

&lt;p&gt;Moving On&lt;/p&gt;

&lt;h3 id=&quot;lesson_18&quot;&gt;Lesson 18&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#18&quot;&gt;GO FOR&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    sum := 0
    for i := 0; i &amp;lt; 10; i++ {
        sum += i
    }
    fmt.Println(sum)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Go has only one looping construct, the for loop.&lt;/p&gt;

&lt;p&gt;The basic for loop looks as it does in C or Java, except that the ( ) are gone (they are not even optional) and the { } are required.&lt;/p&gt;

&lt;p&gt;NOTE: DON’T Bracket for loops&lt;/p&gt;

&lt;p&gt;Moving On&lt;/p&gt;

&lt;h3 id=&quot;lesson_19&quot;&gt;Lesson 19&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#19&quot;&gt;GO FOR ++&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    sum := 1
    for ; sum &amp;lt; 1000; {
        sum += sum
    }
    fmt.Println(sum)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As in C or Java, you can leave the pre and post statements empty. NOTE: probably shouldn’t use this as this might be hard to debug or differenciate.&lt;/p&gt;

&lt;p&gt;Moving On&lt;/p&gt;

&lt;h3 id=&quot;lesson_20&quot;&gt;Lesson 20&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#20&quot;&gt;GO FOR WHILE&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func main() {
    sum := 1
    for sum &amp;lt; 1000 {
        sum += sum
    }
    fmt.Println(sum)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At that point you can drop the semicolons: C’s while is spelled for in Go.&lt;/p&gt;

&lt;p&gt;NOTE: hmmm, not really got a preference in using this while for looping right now~&lt;/p&gt;

&lt;p&gt;Moving On.&lt;/p&gt;

&lt;h3 id=&quot;lesson_21&quot;&gt;Lesson 21&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#21&quot;&gt;GO FOR EVER&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

func main() {
    for {
    }
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you omit the loop condition it loops forever, so an infinite loop is compactly expressed.&lt;/p&gt;

&lt;p&gt;Moving on~ END OF PART 2:&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>getting started with golang Part 1</title>
   <link href="http://username.github.io/2014/02/18/getting-started-with-golang-part-1"/>
   <updated>2014-02-18T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/02/18/getting-started-with-golang-part-1</id>
   <content type="html">&lt;p&gt;If you’re just starting with GO - you’re in good hands, because the documentation for Go Lang is pretty good compared to other things I’ve seen.&lt;/p&gt;

&lt;p&gt;For starters - head over to &lt;a href=&quot;http://tour.golang.org/&quot;&gt;Tour of GO&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;lesson_4&quot;&gt;Lesson 4&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#4&quot;&gt;GO PACKAGES&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math/rand&amp;quot;
)

func main() {
    fmt.Println(&amp;quot;My favorite number is&amp;quot;, rand.Intn(10))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every Go Program is made up of packages, and will init the page &lt;code&gt;main&lt;/code&gt; to begin with. Within this program, we are using the following packages with import paths &lt;code&gt;fmt&lt;/code&gt; and &lt;code&gt;math/rand&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;fmt&lt;/code&gt; is dealing with out input/out, much like ‘stdio’ in C or ‘stdin’ in C++.&lt;br /&gt;Moving On.&lt;/p&gt;

&lt;h3 id=&quot;lesson_6&quot;&gt;Lesson 6&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#6&quot;&gt;GO EXPORTED NAMES&lt;/a&gt;&lt;br /&gt; package main&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;math&amp;quot;
)

func main() {
    fmt.Println(math.Pi)
}   &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It appears that ever importing a package, the dev refer to the package exports if the name begins with a Capital letter. “Foo” is an exported name, as if “FOO”. the name “foo” will not be exported. Comment: “odd - but i’ll play along”.&lt;/p&gt;

&lt;p&gt;“`fmt.Println(math.Pi) will run whereas “`fmt.Println(math.pi) will not~&lt;/p&gt;

&lt;p&gt;Moving On.&lt;/p&gt;

&lt;h3 id=&quot;lesson_7&quot;&gt;Lesson 7&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#7&quot;&gt;GO FUNCTIONS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func add(x int, y int) int {
    return x + y
}

func main() {
    fmt.Println(add(42, 13))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;functions seems pretty straight forward - though we do need to be aware of the var declaration types.&lt;/p&gt;

&lt;p&gt;seems we can also refactor &lt;code&gt;x int, y int&lt;/code&gt; to &lt;code&gt;x,y int&lt;/code&gt; -&lt;/p&gt;

&lt;p&gt;Moving On.&lt;/p&gt;

&lt;h3 id=&quot;lesson_9&quot;&gt;Lesson 9&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#9&quot;&gt;GO MULTIPLE RESULTS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func swap(x, y string) (string, string) {
    return y, x
}

func main() {
    a, b := swap(&amp;quot;hello&amp;quot;, &amp;quot;world&amp;quot;)
    fmt.Println(a, b)
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;“A function can return any number of results” - Hmmm - interesting… I’m not too sure what this means~ a, b := swap(“hello”, “world”) May explain this later in the documentation&lt;/p&gt;

&lt;p&gt;Moving On.&lt;/p&gt;

&lt;h3 id=&quot;lesson_10&quot;&gt;Lesson 10&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://tour.golang.org/#10&quot;&gt;GO NAMED RESULTS&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func split(sum int) (x, y int) {
    x = sum * 4/9
    y = sum - x
    return
}

func main() {
    fmt.Println(split(40))
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As functions can return multple “result params”, they can be names and act just ike variables.&lt;/p&gt;

&lt;p&gt;If the results are named, a return statement without arguments will return teh current values of the results.&lt;/p&gt;

&lt;p&gt;So in the above, the return statement will return both x and y where they are equal to their assignment values.&lt;/p&gt;

&lt;p&gt;Moving On.&lt;/p&gt;

&lt;p&gt;END OF PART 1:&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting started with QA part 2</title>
   <link href="http://username.github.io/2014/01/14/getting-started-with-qa-part-2"/>
   <updated>2014-01-14T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/14/getting-started-with-qa-part-2</id>
   <content type="html">&lt;p&gt;One of the things with getting started with qa is basically the fallacy of most QA articles out there.&lt;/p&gt;

&lt;p&gt;QA as a field when comparing it to software development as a whole is an additive process, which helps aid in the develop cycle. However, I believe that adding the QA process as a formal process AFTER the development cycle is complete only hinders both the development cycle and the learning experience of a junior developer.&lt;/p&gt;

&lt;p&gt;The thing that I have found as a junior web developer as well as my short time as a QA, is that having the mindset of a QA actually &lt;em&gt;HELPS&lt;/em&gt; me as a developer.&lt;/p&gt;

&lt;p&gt;“Why” you ask?&lt;/p&gt;

&lt;p&gt;The first thing to keep in mind is that as a QA, my job was to address not only the clients issues with respect to a piece of software… but to accurately and effectively communicate the problems to the software development team.&lt;/p&gt;

&lt;p&gt;Effective Communication is by far THE MOST underrated skill that a developer can gain within their career.&lt;/p&gt;

&lt;p&gt;If you are a QA and can use the same language and process of breaking down a problem/bug into it’s constituent parts, YOU are increasing the effectiveness of the team at solving problems.&lt;/p&gt;

&lt;p&gt;Not only does communicating well with your team help them in solving the problem, but having the language to actively find out WHERE the problem lies within the debugging tools saves an incredible amount of time for YOUR team to waste as minimal amount of time searching for the problem.&lt;/p&gt;

&lt;p&gt;The biggest problem with bugtracking is reproducing the EXACT conditions of the bugs existance.&lt;/p&gt;

&lt;p&gt;That might sound like a big pile of BS, but hear me out.&lt;/p&gt;

&lt;p&gt;If a user/tester does NOT effectively communicate ALL ESSENTIAL aspects of their testing environment, the amount of time WASTED increases exponentially with every piece of information that was omitted.&lt;/p&gt;

&lt;p&gt;Example: Web Development.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;What Browser is the tester using (and limiting to Brand does not help) - As a QA, I want to know EVERYTHING! - the OS, the Version, what Time this was run, what PAGE… Even What BRAND of PC.&lt;/li&gt;

&lt;li&gt;What did you DO to get to that bug? I want to know EVERYTHING that YOU did so I don’t waste time “TRYING” to replicate the damn bug.&lt;/li&gt;

&lt;li&gt;Testers should focus ONLY on the ONE ISSUE. I can’t count the number of times where testers will just whine about how “everything is broken”… Look, I don’t get paid to listen to your complaints, I ONLY get paid to find out the bugs and convey that to my team. I don’t want to hear about anything about the bad day you’re having, that’s just not being professional.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Anyways - Rant Over&lt;/p&gt;

&lt;p&gt;Here’s a free quick tools you should use when you are doing some QA.&lt;/p&gt;

&lt;p&gt;MAC OS X Tools&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;QuickTime Movie for Video Screen Capture&lt;/li&gt;

&lt;li&gt;CMD + SHIFT + 4 (to save screen as picture which is usually saved onto your desktop)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Windows Tools&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;CamStudio (Video Capture, Pretty decent for Open Source)&lt;/li&gt;

&lt;li&gt;FRAPS (Save Screen without using PrntScreen and Paint)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Takeaway Points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Be very explicit in your description/outline of the problem. It helps if you provide a video to SHOW devs how the event occurred, and it helps capturing small bugs that you didn’t notice the first time round.&lt;/li&gt;

&lt;li&gt;Be patient with your testers, they generally won’t know how to express the problem, so if you can train them before hand, that’d be an ideal situation… Otherwise, try to train them during the testing process.&lt;/li&gt;

&lt;li&gt;Be bold in trying to ‘BREAK’ the application as hard as humanly possible. Alot of the times, the user won’t know how to test the application, so if you are testing out UI interactions, click on a button a thousand times, refresh the page, type stupid shit in the input and repeat. You never know what sort of unexpected behaviour you might produce unless you’re bold enough to WANT to break the app.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Anyways - Speak soon D&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Getting started with QA GUI testing</title>
   <link href="http://username.github.io/2014/01/07/getting-started-with-qa-gui-testing"/>
   <updated>2014-01-07T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/07/getting-started-with-qa-gui-testing</id>
   <content type="html">&lt;p&gt;So how do you Automate GUI testing for web applications?&lt;/p&gt;

&lt;p&gt;There’s an interesting site called &lt;a href=&quot;http://csste.st/tools/&quot;&gt;csste.st&lt;/a&gt; which is a good source to find more some directions for some CSS Testing tools, however, I’d like to expand this post to include some others.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;We’re not talking about Unit Testing here, but about consistently testing and accurately recording the the user flow of web appications, there isn’t a great deal of tools available to the Dev&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;However, it’s a great opportunity to outline a few tools that &lt;em&gt;CAN&lt;/em&gt; help to this regard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.browserstack.com&quot;&gt;Defacto: “BrowserStack”&lt;/a&gt; isn’t great if you’re trying to hustle, but incredibly powerful if you’re able to fork $20 a month. That basic plan doesn’t give you all the bells and whistles, but it will give you enough to get pretty far on your Frontend Dev.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://cssregressiontesting.com/&quot;&gt;Pricey Alternative: “Mogotest”&lt;/a&gt; is a prety interesting site that is trying to compete against BrowserStack, though the plans are pretty expensive.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;tools&quot;&gt;#Tools&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://cburgmer.github.io/csscritic/&quot;&gt;CSSCritic&lt;/a&gt; is incredibly lightweight and I’d only recommend it for a quick comparison during your dev cycle. It is basically a screen capture plugin to compare two versions of a site which will highlight elements which are out of alignment compared to the original picture.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/Huddle/PhantomCSS&quot;&gt;Lightweight OpenSource Alt: “PhantomCSS”&lt;/a&gt; is an alternative to CSSCritic which offers a little more&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://hardy.io/&quot;&gt;Hardy.io&lt;/a&gt; is the big brother to GhostStory&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BBC-News/wraith&quot;&gt;BBC News Wraith&lt;/a&gt; is incredibly impressive. Running on Ruby, this uses a &lt;code&gt;rake&lt;/code&gt; task to run automated screen capture tests which are saved on the local directory. I particularly like how you can run the rake task to pull the requested web pages and then save a comparision of two pages as a highlighted image within a gallery context. Another thing I particularly like is how you can specify the screen sizes of the pages that you want the screen shots to be captured.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/watir/watir&quot;&gt;Watir&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://watir.com/&quot;&gt;Official Blog site for Watir&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;automated_recorders&quot;&gt;#Automated Recorders&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;http://docs.seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt; is a Firebox plugin which allows the user to run browser automation tests. You can program on a plethora of programming languages though I do dislike the fact that you are required to have firefox as a prerequesite.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://darrellgrainger.blogspot.hk/2010/02/selenium-101.html&quot;&gt;Getting Started on Selenium&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://refcardz.dzone.com/refcardz/getting-started-selenium&quot;&gt;More in-depth Selenium&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.youtube.com/watch?v=gsHyDIyA3dg&quot;&gt;like Youtube Tutorials?&lt;/a&gt;&lt;br /&gt;I like how you can export to Python or Ruby via Web Driver, but I’m a little disappointed that you can’t import back into Selenium IDE after you’ve exported out.&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://npmjs.org/package/selenium-webdriver&quot;&gt;Selenium-WebDriver&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;http://www.sikuli.org/&quot;&gt;Sikuli&lt;/a&gt; is a python based IDE for automated testing. I tried to use this during my brokerage days to automate financial reporting, but the only caveat is that Sikuli doesn’t play nicely when you have buttons that are incredibly small within properietary software. There hasn’t been much development for a while, which leads me to consider other alternatives - &lt;a href=&quot;https://github.com/daizoru/node-sikuli&quot;&gt;Node-Sikuli&lt;/a&gt; Here is Sikuli to be used for node.&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;cli_tools&quot;&gt;#CLI tools&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/brenden/node-webshot&quot;&gt;node-webshot&lt;/a&gt; &lt;a href=&quot;http://docs.casperjs.org/en/latest/quickstart.html&quot;&gt;CasperJS&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;takeaways&quot;&gt;#Takeaways&lt;/h3&gt;

&lt;p&gt;There’s some underlying similarities between the different tools currently available. The most common tools that continue to pop up are Selenium Webdriver and PhantomJS.&lt;br /&gt;Why do you need the Webdriver?&lt;br /&gt;Why do you need PhantomJs/CasperJS?&lt;/p&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;tips_and_tricks_for_qa&quot;&gt;#Tips and Tricks for Q&amp;amp;A&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Invalid HTML&lt;/li&gt;

&lt;li&gt;Form Validation&lt;/li&gt;

&lt;li&gt;Content Wrapping&lt;/li&gt;

&lt;li&gt;Tolerance Levels against Design&lt;/li&gt;

&lt;li&gt;Optimize for one browser type and fix inconsistencies for others?&lt;/li&gt;

&lt;li&gt;Dynamically Generated Content?&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;future_post_ideas&quot;&gt;#Future Post Ideas&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Browser Stack API?&lt;/li&gt;

&lt;li&gt;What is Web Driver&lt;/li&gt;

&lt;li&gt;Indepth Look at Hardy.io&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Interview with General Assembly</title>
   <link href="http://username.github.io/2014/01/06/interview-with-general-assembly"/>
   <updated>2014-01-06T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/06/interview-with-general-assembly</id>
   <content type="html">&lt;p&gt;It’s just over three months since I had my interview with General Assembly as part of their Alumni program.&lt;/p&gt;

&lt;p&gt;Unfortunately, I can’t seem to locate my unedited original interview with General Assembly back in September 2013, but I’ll give the summary with the interview included below:&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Big Trouble in Little Chinese Language Files</title>
   <link href="http://username.github.io/2014/01/03/big-trouble-in-little-chinese-language-files"/>
   <updated>2014-01-03T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/03/big-trouble-in-little-chinese-language-files</id>
   <content type="html">&lt;p&gt;Today was a bit of stange day -&lt;/p&gt;
&lt;!-- ...I encountered  file and I hope I can outline some scenarios so you too can avoid the eventual faceplant same pitfalls that I almost faceplanted.
 --&gt;
&lt;p&gt;Basically, from GA FEWD and in Frontend, you will want to import custom font files that are either hosted locally or on a CDN like &lt;a href=&quot;http://www.google.com/fonts&quot;&gt;google fonts&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you want to include a open font type, you will need to include the &lt;code&gt;@font face&lt;/code&gt; within your CSS. Thereafter, you’ll be able to control what elements you want that font style applied into your webpage.&lt;/p&gt;

&lt;p&gt;Below is an example of how you’ll go about doing that.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@font-face
{
font-family: myAwesomeFont;  
src: url(awesomeFont.ttf), local(awesomeFont);  
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then in your stylesheet under your specified class, id or element, you’ll need to add this onto your choice of element. (I’ve used body as the example)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;body
{
font-family: myAwesomeFont;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Caveat: Font face is not supported on ie8 and under.&lt;/p&gt;
&lt;hr /&gt;
&lt;h4 id=&quot;so_whats_the_problem&quot;&gt;So what’s the problem?&lt;/h4&gt;

&lt;p&gt;Well, the problem was as follows - Traditional Chinese was being rendered onto the DOM, along with the Simplified Chinese - so what was the problem?&lt;/p&gt;

&lt;p&gt;Whenever I looked at the Mac version of the site, the Simplified Chinese was being rendered with a system font which looked incredibly similar to the desired style that I wanted to render. However, whenever this was rendered on a Windows Machine on Chrome (running the exact same browser), the Windows system font would actually a very different font style?&lt;/p&gt;

&lt;p&gt;So what was actually happening?&lt;/p&gt;

&lt;p&gt;I had hypothesized that the Traditional Chinese font file was renderering &lt;em&gt;SOME&lt;/em&gt; of the Simplified Chinese, but the curious case was why was it rendering only some and not &lt;em&gt;ALL&lt;/em&gt; of the characters?&lt;/p&gt;

&lt;p&gt;This lead me onto a deep and dark rabbit hole which would inevitably lead me to some very intereresting caveats about using font types.&lt;/p&gt;

&lt;p&gt;As Web Developers, we all know that the openness of the web was not created for font foundries in mind. That being said, any font that isn’t openly licensed or legally purchased will be liable to some bad times&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn.memegenerator.net/instances/500x/44606316.jpg&quot; alt=&quot;Bad Time&quot; title=&quot;Bad Time&quot; /&gt;&lt;/p&gt;

&lt;h4 id=&quot;update&quot;&gt;Update&lt;/h4&gt;

&lt;p&gt;Anyways - that Tangent aside, my colleague Ethan had a quick look around at the most popular only font foundaries about why the font files had specific naming.&lt;/p&gt;

&lt;p&gt;There was a peculiar naming scheme of “Simplified on Traditional”&lt;/p&gt;

&lt;p&gt;Which meant&lt;/p&gt;

&lt;p&gt;That for whatever Traditional Chinese character code will be translated into Simplified Chinese via the font file&lt;/p&gt;

&lt;h3 id=&quot;wtf&quot;&gt;WTF?&lt;/h3&gt;</content>
 </entry>
 
 <entry>
   <title>Getting started with Threejs via Yeoman</title>
   <link href="http://username.github.io/2014/01/02/getting-started-with-threejs-via-yeoman"/>
   <updated>2014-01-02T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/02/getting-started-with-threejs-via-yeoman</id>
   <content type="html">&lt;h3 id=&quot;using_yeoman_to_getting_started_with_threejs&quot;&gt;Using Yeoman to getting started with Threejs&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/timmywil/generator-threejs&quot;&gt;Source&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;getting_started&quot;&gt;Getting Started&lt;/h3&gt;

&lt;p&gt;There isn’t a lot to know if you’ve followed the previous &lt;a href=&quot;http://denistsoi.github.io/2014/01/01/getting-started-with-yeoman/&quot;&gt;‘Getting Started with Yeoman’ Post&lt;/a&gt;, however, if you haven’t read that already, I’ll include what you need to know below.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g yo&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will install yeoman globally if you haven’t already.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm install -g generator-threejs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This is make yeoman install a threejs generator for you.&lt;/p&gt;

&lt;p&gt;Afterwards, go into the folder of your threejs project and&lt;/p&gt;

&lt;p&gt;&lt;code&gt;yo threejs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You then have the option of running allow AMD into your project.&lt;/p&gt;

&lt;p&gt;Note: If you’re unfamiliar with AMD, like I am at this current moment, then I implore you to read the &lt;a href=&quot;https://github.com/amdjs/amdjs-api/wiki/AMD&quot;&gt;following.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you just want a stock threejs project, then this should get you going.&lt;/p&gt;

&lt;p&gt;Run &lt;code&gt;grunt serve&lt;/code&gt; in your terminal to init a grunt server to view your project in browser.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>agencies</title>
   <link href="http://username.github.io/2014/01/02/agencies"/>
   <updated>2014-01-02T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/02/agencies</id>
   <content type="html">&lt;hr /&gt;
&lt;h3 id=&quot;resources_of_digital_agencies&quot;&gt;Resources of Digital Agencies&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://weareadaptable.com/&quot;&gt;We are Adaptable&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.pixopunch.com/&quot;&gt;pixel punch&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.possible.com/&quot;&gt;Possible&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.wearepapertiger.com/&quot;&gt;We are Paper Tiger&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://creative-jar.com/&quot;&gt;Creative Jar&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.f-i.com/fi/airlines/&quot;&gt;Fantasy Interactive&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://playbook.thoughtbot.com/&quot;&gt;Thought bot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;tutorials&quot;&gt;Tutorials&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/&quot;&gt;HTML5 Rocks Tuts&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/masking/adobe/&quot;&gt;HTML5 Adobe&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/dirkschulze&quot;&gt;Twitter Recommendation&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/revolutions2013/&quot;&gt;HTML5 2013 Revolutions 2013 Tutorials&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/canvas/inspection/&quot;&gt;Canvas Inspection&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr /&gt;
&lt;h3 id=&quot;inspiring_developers&quot;&gt;Inspiring Developers&lt;/h3&gt;

&lt;h4 id=&quot;paul_lewis&quot;&gt;Paul Lewis&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://twitter.com/PaulLewis&quot;&gt;Paul Lewis Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;ebidel&quot;&gt;Ebidel&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/&quot;&gt;Ebidel HTML5 Shadow DOM&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/ebidel&quot;&gt;Ebidel Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;addy_osmani&quot;&gt;Addy Osmani&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://addyosmani.com/blog/&quot;&gt;Addy Osmani&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/addyosmani&quot;&gt;Addy Osmani Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;zomigi&quot;&gt;Zomigi&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://zomigi.com/blog/&quot;&gt;Zomigi&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/zomigi&quot;&gt;Zomigi Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;rachael_andrew&quot;&gt;Rachael Andrew&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.rachelandrew.co.uk/&quot;&gt;Racheal Andrew Personal Site&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/rachelandrew&quot;&gt;Racheal Andrew Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;carl_smith&quot;&gt;Carl Smith&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ngenworks.com/speakers/carl-smith/&quot;&gt;Ngen Works Carl Smith&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/carlsmith&quot;&gt;Carl Smith Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;brad_frost&quot;&gt;Brad Frost&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://bradfrostweb.com/blog/post/float-label-pattern/&quot;&gt;Brad Frost Float Label Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;lea_verou&quot;&gt;Lea Verou&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://lea.verou.me/&quot;&gt;Lea Verou Personal Site&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/LeaVerou&quot;&gt;Lea Verou Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;david_walsh&quot;&gt;David Walsh&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://davidwalsh.name/&quot;&gt;David Walsh Personal Site&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/davidwalshblog&quot;&gt;David Walsh Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;mr_doob&quot;&gt;Mr doob&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.mrdoob.com/&quot;&gt;Mr doob Personal Site&lt;/a&gt;&lt;/li&gt;

&lt;li&gt;&lt;a href=&quot;https://twitter.com/mrdoob&quot;&gt;Mr doob Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>Getting started with Yeoman</title>
   <link href="http://username.github.io/2014/01/01/getting-started-with-yeoman"/>
   <updated>2014-01-01T00:00:00+08:00</updated>
   <id>http://username.github.io/2014/01/01/getting-started-with-yeoman</id>
   <content type="html">&lt;h3 id=&quot;continuing_onwards&quot;&gt;Continuing onwards&lt;/h3&gt;

&lt;p&gt;Using Yeoman with Angular-Generator &lt;a href=&quot;http://www.youtube.com/watch?v=iUQ1fvdO9GY#t=113&quot;&gt;Link&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Install Yeoman globally with&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ npm install -g yo&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$ npm install -g generator-angular&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Make a new directory of where you want to put your app&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ mkdir todo&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$ cd todo&lt;/code&gt;&lt;br /&gt;&lt;code&gt;$ yo angular&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If everything went well, then run&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ grunt server&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&quot;update_success&quot;&gt;Update SUCCESS!&lt;/h3&gt;
&lt;hr /&gt;
&lt;p&gt;If you’d like to read more about how I got on with using Yeoman with Angular, I write an extension of this post with a relevant link later.&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;

&lt;h3 id=&quot;footnotes&quot;&gt;Footnotes:&lt;/h3&gt;

&lt;h3 id=&quot;yomobile&quot;&gt;&lt;a href=&quot;https://github.com/yeoman/generator-mobile&quot;&gt;Yo-Mobile?&lt;/a&gt;&lt;/h3&gt;</content>
 </entry>
 
 <entry>
   <title>Getting started with gruntjs</title>
   <link href="http://username.github.io/2013/12/30/getting-started-with-gruntjs"/>
   <updated>2013-12-30T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/12/30/getting-started-with-gruntjs</id>
   <content type="html">&lt;h4 id=&quot;referencing_article&quot;&gt;Referencing Article&lt;/h4&gt;

&lt;h4 id=&quot;up_and_running_with_gruntjs&quot;&gt;&lt;a href=&quot;http://coding.smashingmagazine.com/2013/10/29/get-up-running-grunt/&quot;&gt;Up and Running with GruntJS&lt;/a&gt;&lt;/h4&gt;

&lt;h4 id=&quot;gruntjs_primer&quot;&gt;GruntJS Primer&lt;/h4&gt;

&lt;blockquote&gt;
&lt;p&gt;Built on top of Node.js, Grunt is a task-based command-line tool that speeds up workflows by reducing the effort required to prepare assets for production.&lt;br /&gt;It does this by wrapping up jobs into tasks that are compiled automatically as you go along. Basically, you can use Grunt on most tasks that you consider to be grunt work and would normally have to manually configure and run yourself.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Simply put - it helps when you’re doing commands like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sass --watch main.sass:main.css  &lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ coffee --compile --watch main.coffee:main.js&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or even&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python -h SimpleHTTPServer&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;However, depending on your Gruntfile, you could just&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ grunt server&lt;/code&gt;&lt;/pre&gt;
&lt;hr /&gt;
&lt;h2 id=&quot;ok_lets_get_started_follow_the_repo_here&quot;&gt;Ok Let’s get started… Follow the repo &lt;a href=&quot;https://github.com/denistsoi/port-js&quot;&gt;here&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Update: 20:00 30-12-2013&lt;/p&gt;

&lt;p&gt;OMG, This was a complete pain in the ass. Ok one of the MOST FRUSTRATING thing you should be aware about is if you have previously had node/npm install, you may need to use the command in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo npm cache clean&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Why?&lt;br /&gt;Well, apparently, if you don’t clean/clear your cache, some dependancies will give you some errors like&lt;/p&gt;

&lt;p&gt;&lt;code&gt;npm ERR! cb() never called!&lt;/code&gt;&lt;br /&gt;&lt;code&gt;npm ERR! not ok code 0&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I ended up using the yeoman generator, which I will outline below after I’ve worked tried Yeoman with Angular.&lt;br /&gt;if you are using terminal and keep having the password prompting then the following seems to help&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chown -R `whoami` ~/.npm   
$ sudo chown -R `whoami` /usr/local/lib/node_modules&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There’s another command, which I will update at a later date which also seems to the same thing.&lt;/p&gt;

&lt;p&gt;Update - Here is the terminal command to allow global installation via npm&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo chown -R $USER /usr/local&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&quot;http://foohack.com/2010/08/intro-to-npm/&quot;&gt;source&lt;/a&gt;&lt;/p&gt;
&lt;hr /&gt;
&lt;p&gt;I got pretty fed up with trying to generate a stand alone grunt project and ended up with using yeoman - which is further detailed in the following post&lt;br /&gt;&lt;a href=&quot;http://denistsoi.github.io/2014/01/01/getting-started-with-yeoman/&quot;&gt;relevant post&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Dynamic vs static?</title>
   <link href="http://username.github.io/2013/12/30/Dynamic-vs-static"/>
   <updated>2013-12-30T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/12/30/Dynamic-vs-static</id>
   <content type="html">&lt;h4 id=&quot;please_read_this_article_from_smashing&quot;&gt;&lt;a href=&quot;http://coding.smashingmagazine.com/2013/04/18/introduction-to-programming-type-systems/&quot;&gt;Please read this article from Smashing&lt;/a&gt;&lt;/h4&gt;

&lt;p&gt;Whilst working at Imagination as my first job as a web developer, I overheard a lot of conversations between “Static vs Dynamic Languages”.&lt;/p&gt;

&lt;p&gt;Now what do they mean? -&lt;/p&gt;

&lt;p&gt;I started programming with Visual Basic in my teens and got into my first programming language with using C (to program Arduinos)&lt;/p&gt;

&lt;p&gt;but the conversation between Static and Dynamic Languages never came up&lt;/p&gt;

&lt;p&gt;What’s the big deal?&lt;/p&gt;

&lt;p&gt;Well - there’s a couple of good arguments for both in the article above &lt;a href=&quot;http://coding.smashingmagazine.com/2013/04/18/introduction-to-programming-type-systems/&quot;&gt;link again&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I don’t have much to add to the topic, but hope you enjoy the above article.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Reflection</title>
   <link href="http://username.github.io/2013/12/29/relfection"/>
   <updated>2013-12-29T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/12/29/relfection</id>
   <content type="html">&lt;h1 id=&quot;reflection&quot;&gt;Reflection&lt;/h1&gt;

&lt;p&gt;It’s been a while since my last post.&lt;/p&gt;

&lt;p&gt;I’ve been busy at work to the detrement of a lot of things and I’m glad that I’ve taken the time over the Christmas Holidays to reflect and relive the past few months since I joined Imagination.&lt;/p&gt;

&lt;p&gt;I always knew that this job as a web dev was going to be tough, but I never knew that the final month before Christmas would ultimately test my physical and mental limit.&lt;/p&gt;

&lt;p&gt;Admittantly, I began to feel exhausted before Christmas, where most of the deadlines were due. I had the mental approach of giving as much time as possible towards work, to the detrement of my social and family life. I had felt like I hadn’t enjoyed my time since most of it was dedicated to work. I realised that I can’t do that if I were to come back after the New Year, and my lifestyle (life choices) had to change.&lt;/p&gt;

&lt;p&gt;I’ve had a lot of conversations with &lt;a href=&quot;https://twitter.com/rusintez&quot;&gt;Vladimir&lt;/a&gt; over the past few months about what I should be focusing when it came to my learning process. And although there are a lot of things that I do not know, I realised yesterday that I have to dedicate time towards study.&lt;/p&gt;

&lt;p&gt;This means, having the same approach of “going back to school”, when it came to improving my programming skills.&lt;/p&gt;

&lt;p&gt;I hope this blog post can serve as a commitment to myself to seeing how much I can learn and ultimately share in the next couple of months.&lt;/p&gt;

&lt;p&gt;…&lt;br /&gt;…&lt;br /&gt;…&lt;/p&gt;

&lt;p&gt;… I hope this Christmas break has helped give you the same realisations for the new year.&lt;/p&gt;

&lt;p&gt;D&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>First Post!</title>
   <link href="http://username.github.io/2013/10/12/first-post"/>
   <updated>2013-10-12T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/10/12/first-post</id>
   <content type="html">&lt;p&gt;It’s been quite a hectic couple of months for me and today is probably the first time that I’ve felt alone.&lt;/p&gt;

&lt;p&gt;I know that it sounds like a bad thing, but there hasn’t been much of an opportunity for me to just sit down and reflect on what has been happening in my life.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;I was a Precious Metals Dealer for Acetop Precious Metals based in Hong Kong.&lt;/li&gt;

&lt;li&gt;I took a General Assembly Front End Web Development class in May 2013.&lt;/li&gt;

&lt;li&gt;I left my Dealer job to become a Developer in August 2013.&lt;/li&gt;

&lt;li&gt;I joined Imagination Hong Kong a week after I left my previous job.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m the type of person who likes to keep busy&lt;/p&gt;

&lt;p&gt;Like&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;Really busy.&lt;/p&gt;

&lt;p&gt;I remember a story about where James Brown got his work ethic. It was a story about how hard his father had to work, doing all kinds of jobs… and he was only out of work 7 days throughout his entire life.&lt;/p&gt;

&lt;p&gt;Think about that&lt;/p&gt;

&lt;p&gt;7 days.&lt;/p&gt;

&lt;p&gt;You might be thinking&lt;/p&gt;

&lt;p&gt;“But… I’m not the father of the Godfather of Soul”&lt;/p&gt;

&lt;p&gt;Yes - you might not be&lt;/p&gt;

&lt;p&gt;but YOU could BE the influence for someone to make a change.&lt;/p&gt;

&lt;p&gt;… … &lt;/p&gt;

&lt;p&gt;I remembered during my times at University as a pinnicle phase of my life&lt;/p&gt;

&lt;p&gt;…where I had become disappointed at my life choices.&lt;/p&gt;

&lt;p&gt;I didn’t REALLY know what I was doing and didn’t have the confidence to admit to myself that I was feeling lost.&lt;/p&gt;

&lt;p&gt;When I went into University, I had the feeling that I could do a degree in the fastest pace possible and that I even entertained with the idea of doing a sandwich degree (doing full year work experience inbetween my degree).&lt;/p&gt;

&lt;p&gt;I had listened to professors (whenever I went to the prospective interviews) that doing work experience inbetween would not be the wisest of decisions&lt;/p&gt;

&lt;p&gt;I accepted that advice as if those very professors knew WHO I was&lt;/p&gt;

&lt;p&gt;but… Why did I?&lt;/p&gt;

&lt;p&gt;At the time, I believed that people older than I was, whether they were teachers or my older peers knew best&lt;/p&gt;

&lt;p&gt;but… How did I come to that conclusion?&lt;/p&gt;

&lt;p&gt;I never realised at the time that I was responsible to make the final decision&lt;/p&gt;

&lt;p&gt;I had failed my year, and had to spend a summer in order to retake my year. During that summer, I had felt depressed and lost and needed motivation to get through the summer on my own.&lt;/p&gt;

&lt;p&gt;It was around this time that I discovered Tony Robbins and Robin Sharma. The inspirational people that I gravitated towards was Ghandi and Einstein.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...&amp;quot;Be the change you want to see&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What does it mean to enjoy life? - to Really be content on life itself?&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Going for Gold</title>
   <link href="http://username.github.io/2013/07/02/Going-for-Gold"/>
   <updated>2013-07-02T00:00:00+08:00</updated>
   <id>http://username.github.io/2013/07/02/Going-for-Gold</id>
   <content type="html">&lt;p&gt;Going for Gold&lt;/p&gt;

&lt;p&gt;Today I handed my resignation letter. I’ve been spouting about doing it for ages now, probably for months. (and for the facebook community, you must be sick to death by it so I apologize in advance). I guess the thing that always frightened me was always the fear of uncertainty… the fear of having nothing to do and no money coming in.&lt;/p&gt;

&lt;p&gt;However, this past year has been incredible.&lt;/p&gt;

&lt;p&gt;I’ve experienced so many obstacles and personal disappointments… but they’ve all lead me to appreciate the incredible relationships that I’ve made; all within the Hong Kong community. From appreciating Eric, my older brother, confidant and most trusted advisor… to the many inspiring people that have shown nothing but support by sharing their stories of trials and tribulations. I’m not entirely sure how I feel… but the closest thing would be a mix of uncertainty and fear to relief, determination and elation.&lt;/p&gt;

&lt;p&gt;Last night at Hackjam, I experienced a very moving conversation with Tom Grek and how he realized that all the fear from leaving a safe job were completely unfounded. That with talent and skill, work will always come your way.&lt;/p&gt;

&lt;p&gt;…&lt;/p&gt;

&lt;p&gt;That really stuck with me.&lt;/p&gt;

&lt;p&gt;I mean&lt;/p&gt;

&lt;p&gt;It made me realize, that with all the projects; from PrinterLinker and receiving support from the Makible team, being a Community Organizer for Dim Sum Labs, a GA Evangelist and Hacker For hire; that they all give me PLENTY of things to do… and somehow… it makes perfect sense just to “go for gold”.&lt;/p&gt;

&lt;p&gt;Though I have to mention something which is a slight tangent.&lt;/p&gt;

&lt;p&gt;I don’t do well in crowds and whenever I’m in a situation where I’m in front of a group of people, I have to sum up ALL my courage and energy to try and make every word have an emotive impact.&lt;/p&gt;

&lt;p&gt;For someone that doesn’t like to talk or appear showy… it helps to assume an identity… THAT being the identity of a “Community Organizer” for DSL.&lt;/p&gt;

&lt;p&gt;I guess the “Community Organizer” is the guy who always gives a little more than they’re normally used to. The person who offers a helping hand when someone needs it. The person who holds their tongue to avoid offending someone and having a partition of patience when they’re extremely tired. The person who says “hi” not because they’re trained to do it, but because something inside them tells them that they HAVE to.&lt;/p&gt;

&lt;p&gt;I’ve seen people I admire do the above (and also have the pleasure of calling my friends). The past few months, I’ve seen notable three people do this to extremes: Mart Van de Ven, Allison Baum, Graham Leach (&amp;amp; DSL).&lt;/p&gt;

&lt;p&gt;I’ve seen Mart do this, almost to a fault, on numerous occasions and I’m always impressed every time he does this. Like, it’s impeccable. I mean, having a job is tough enough in HK, but to do that AND to teach at twice a week with newbies like myself? - … I wonder, “does the passion for learning burn so brightly that it gives people energy to extinguish negativity and doubt?”… It must do. I remember talking to Mart after our last FEWD class and mentioning how if I had someone with Mart’s energy and positivity during my Secondary education, I would have became a Computer Scientist rather than delving into finance. It’s with him agreeing to BEING that person for people now that really inspires me to do more, not just for myself, but for people like myself.&lt;/p&gt;

&lt;p&gt;With Allison calling herself a self-professed introvert, it amazes me how she can drive that energy and kindness when talking to people. It’s hard work, for any startup, to say or even prove that your product is far superior to anything out there. It’s even harder trying to convince people that the curriculum and community that GA provides has more advantages that going Solo. Whenever I go some of these GA info sessions, I sometimes get a feeling of reluctance from people… I mean “Why” would anyone in their right mind purchase a product to learn?… then I’d answer with… “Why” are people getting better paid jobs with perks in the Tech Community?… Think about it this way, The current renaissance that exists is IN TECH. NOT in Finance. If you want to be EXCELLENT - then TECH is the EASIEST way to do just THAT. I’m not saying you have to quit your job and start a business to make your first million. Frankly, I couldn’t care less if I do or not… What I AM saying is… when I’m long into my career, what kind of skills would I want to have I picked up that will STILL be applicable? - I will be damned if I get replaced by a factory of robotic coders.&lt;/p&gt;

&lt;p&gt;Finally, with Graham Leach. He comes across as someone pretty intense and radical. Not being satisfied with the status quo - he’s inspired me to be “Tenacious against Complacency”. Honestly… It’s intimidating being apart of a Hackerspace/Makerspace. People around you are Incredibly smart, more experienced at things that you’ve never heard about. However, they are an incredible group of people that provide the utmost support whenever they see you struggling. They’ve all gone through it… and often, having the courage to just ask after experiencing some struggle will help IMMENSELY.&lt;/p&gt;

&lt;p&gt;I don’t know a lot of people in the startup community personally. I mean, I wish I had the time to get to know people. It takes me a couple of weeks to get to hear people’s stories. “Why did they choose to be in Hong Kong?”, “What are their interests?”, “what problems are they trying to solve now?” - I mean, stack those three questions and multiply that with the numerous people in the community… That’s A LOT of man hours! It isn’t that I don’t want to know WHO you are… it’s just that I can’t physically do it all and STILL go for GOLD. Even though we’re all in the same boat one way or another, it’s deeply moving that people say a short hello or a few words of encouragement. I mean, everyone I’ve mentioned today, they’ve all gone through the troughs in the valley of despair… but we’re all in the same journey for different reasons. I think that this positivity should occur more often in the community. Don’t come into the scene thinking you’re gonna be the next Facebook… do it because you can and it’s the right thing to do.&lt;/p&gt;

&lt;p&gt;So in summary… If you’re feeling good about yourself… share the gold… give some positive encouragement to someone who needs it… shake the hand of someone you haven’t met before… you never know… you might need a little encouragement when you need it most.&lt;/p&gt;

&lt;p&gt;To the people who inspire me, to those who have said a few friendly words and to those who continue to give me support… Thank You. D&lt;/p&gt;</content>
 </entry>
 
 
</feed>